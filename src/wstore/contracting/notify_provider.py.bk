# -*- coding: utf-8 -*-

# Copyright (c) 2013 CoNWeT Lab., Universidad Polit√©cnica de Madrid

# This file is part of WStore.

# WStore is free software: you can redistribute it and/or modify
# it under the terms of the European Union Public Licence (EUPL)
# as published by the European Commission, either version 1.1
# of the License, or (at your option) any later version.

# WStore is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# European Union Public Licence for more details.

# You should have received a copy of the European Union Public Licence
# along with WStore.
# If not, see <https://joinup.ec.europa.eu/software/page/eupl/licence-eupl>.

import json
import urllib2

from django.conf import settings

from wstore.store_commons.utils.method_request import MethodRequest
from wstore.models import Resource
from wstore.models import UserProfile, User

def notify_provider(purchase):
    """
        This method is used to notify the service provider
        that his offering has been purchased
    """
    notification_url = purchase.offering.notification_url

    user = User.objects.get(username=purchase.customer)
    profile = user.userprofile
    ## ONLY FOR TESTING, REMOVE!!
    print (user)
    purchase.offering.applications.append(json.loads('{"url": "", "id": "0c111c24-f042-4ea5-b6d5-7db49c77dc35", "name": "TestApplication3", "description": ""}'))
    if not notification_url and not len(purchase.offering.applications):
        return

    # Build common notification data
    data = {
        'offering': {
            'organization': purchase.offering.owner_organization.name,
            'name': purchase.offering.name,
            'version': purchase.offering.version
        },
        'reference': purchase.ref,
    }

    # Include customer info
    if settings.OILAUTH:
        data['customer'] = purchase.owner_organization.actor_id
        data['customer_name'] = purchase.owner_organization.name
    else:
        data['customer'] = purchase.owner_organization.name

    # Notify the service provider
    if notification_url != '':

        data['resources'] = []
        # Include the resources
        for res in purchase.offering.resources:
            resource = Resource.objects.get(pk=res)

            data['resources'].append({
                'name': resource.name,
                'version': resource.version,
                'content_type': resource.content_type,
                'url': resource.get_url()
            })

        body = json.dumps(data)
        headers = {'Content-type': 'application/json'}

        request = MethodRequest('POST', notification_url, body, headers)

        opener = urllib2.build_opener()

        try:
            response = opener.open(request)
        except:
            pass
    print str(data)
    # if the oil authentication is enabled, notify the idM the new purchase
    if settings.OILAUTH and len(purchase.offering.applications) > 0:
        body = 'username='+settings.KEYCLOAK_ADMIN_USERNAME+'&password='+settings.KEYCLOAK_ADMIN_PASSWORD+'&client_id='+settings.KEYCLOAK_ADMIN_CLIENT_ID
        request = MethodRequest('POST', settings.KEYCLOAK_TOKEN_GRANT_URL, body)
        opener = urllib2.build_opener()
        response = opener.open(request)
        admin_token = json.loads(response.read())['access_token']
        headers = {'Authorization': 'Bearer ' + admin_token}
        request = MethodRequest('GET', settings.AIL_URL+'/api/users/' + data['customer'] + '/companies', '', headers)
        
        opener = urllib2.build_opener()
        try:
            response_org = opener.open(request)
            try:
                organizations = json.loads(response_org.read())
            except ValueError, e:
                organizations = []
                
            for application in purchase.offering.applications:
                print 
                if 'companyList' in organizations:
                    for company in organizations['companyList']:                    
                        role = {}
                        role['companyName'] = company['name']
                        role['name'] = application['name']
                        data = {'data': role}
                        body = json.dumps(data)
                        print body
                        new_headers = {'Authorization': 'Bearer ' + admin_token, 'Content-Type': 'application/json'}
                        request = MethodRequest('POST', settings.AIL_URL+'/api/company/role', body, headers)
                        response = opener.open(request)
                        print str(response)
                        request = MethodRequest('POST', settings.AIL_URL+'/api/users/' + data['customer'] + '/' + company['name'] + '/' + application['name'], '', headers)
                        response = opener.open(request)
                        print str(response)
        except Exception , e:
            print str(e)
            if e.code == 401:
                try:
                    '''
                    # all of this only makes sense if you are NOT using direct access grants
                    print 1
                    # Try to refresh the access_token
                    social = purchase.customer.social_auth.filter(provider='fiware')[0]
                    print social
                    print 2
                    social.refresh_token()
                    print 3
                    # update user information
                    social = purchase.customer.social_auth.filter(provider='fiware')[0]
                    print 4
                    new_credentials = social.extra_data
                    print 5
                    purchase.customer.userprofile.access_token = new_credentials['access_token']
                    purchase.customer.userprofile.refresh_token = new_credentials['refresh_token']
                    purchase.customer.userprofile.save()
                    token = purchase.customer.userprofile.access_token
                    
                    print token
                    headers = {'Authorization': 'Bearer ' + token}
                    request = MethodRequest('GET', settings.AIL_URL+'/api/users/' + data['customer'] + '/companies', '', headers)
                    print "before request"
                    response_org = opener.open(request)
                    print "after request"
                    try:
                        organizations = json.loads(response_org.read())
                    except ValueError, e:
                        organizations = []
                    print (str(organizations))
                    data['applications'] = purchase.offering.applications
                    '''
                except:
                    pass
            else:
                pass
